trigger:
- master

variables:
  # Agent VM image name
  vmImageName: 'ubuntu-20.04'

  # Pool Name
  # poolName: 'suqu'

  # Project web root folder. Point to the folder containing the web app.
  projectWebRoot: $(System.DefaultWorkingDirectory)/web

  # Project web root folder. Point to the folder containing the web app.
  projectDistRoot: $(System.DefaultWorkingDirectory)/dist

  # Project tf root folder. Point to the folder containing the tf files.
  projectTfRoot: $(System.DefaultWorkingDirectory)/tf

  # Artifact Roots
  artifactTfRoot: $(Pipeline.Workspace)/tf
  artifactWebRoot: $(Pipeline.Workspace)/web

  # # Terraform version: v0.14.8
  tfVersion: 'v0.14.8'

  location: 'westeurope'
  project: 'ado2gh'
  env: 'yaml'
  serviceConnection: 'Ordina BE Ncore - Community (b9f36255-8843-4649-8c68-c9d9ca9b95fb)'
  environmentName: 'dev'

stages:
- stage: Build
  displayName: Build stage
  jobs:
  - job: BuildJob
    pool:
      # name: $(poolName)
      vmImage: $(vmImageName)
    steps:
    - task: DotNetCoreCLI@2
      inputs:
        command: 'publish'
        publishWebProjects: false
        projects: '**/*.csproj'
        zipAfterPublish: false
        modifyOutputPath: false
        workingDirectory: '$(projectWebRoot)'

    - task: Bash@3
      displayName: 'Create zip'
      inputs:
        targetType: 'inline'
        script: 'zip -r -D ../publish.zip .'
        workingDirectory: '$(projectWebRoot)/bin/Debug/net5.0/publish'

    - upload: $(projectWebRoot)/bin/Debug/net5.0/publish.zip
      displayName: 'Upload web package'
      artifact: web

    - upload: $(projectTfRoot)
      displayName: 'Upload tf scripts'
      artifact: tf

- stage: Provision
  displayName: 'Provision Infra'
  dependsOn: Build
  condition: succeeded()
  jobs:
  - deployment: ProvisionJob
    pool:
      # name: $(poolName)
      vmImage: $(vmImageName)
    environment: $(environmentName)
    strategy:
      runOnce:
        deploy:
          steps:
          - task: TerraformInstaller@0
            displayName: 'Install Terraform $(tfVersion)'
            inputs:
              terraformVersion: '$(tfVersion)'
          - task: TerraformCLI@0
            displayName: 'Terraform init'
            inputs:
              command: 'init'
              workingDirectory: '$(artifactTfRoot)'
              backendType: 'azurerm'
              backendServiceArm: '$(serviceConnection)'
              backendAzureRmResourceGroupName: 'rg-ado-gh'
              backendAzureRmStorageAccountName: 'saadogh'
              backendAzureRmContainerName: 'tfstate'
              backendAzureRmKey: 'yaml.tfstate'
              allowTelemetryCollection: true

          - task: TerraformCLI@0
            displayName: 'Terraform validate'
            inputs:
              command: 'validate'
              workingDirectory: '$(artifactTfRoot)'
          - task: TerraformCLI@0
            displayName: 'Terraform plan'
            inputs:
              command: plan
              workingDirectory: '$(artifactTfRoot)'
              environmentServiceName: $(serviceConnection)
              commandOptions: '-out out.plan -var="location=$(location)" -var="project=$(project)" -var="env=$(env)"'
              publishPlanResults: plan
          - task: TerraformCLI@0
            displayName: 'Terraform apply'
            inputs:
              command: apply
              workingDirectory: '$(artifactTfRoot)'
              environmentServiceName: $(serviceConnection)
              commandOptions: out.plan

- stage: Deploy
  displayName: 'Deploy Application'
  dependsOn: Provision
  condition: succeeded()
  jobs:
  - deployment: DeployJob
    pool:
      # name: $(poolName)
      vmImage: $(vmImageName)
    environment: $(environmentName)
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureWebApp@1
            displayName: 'Deploy app'
            inputs:
              azureSubscription: $(serviceConnection)
              appType: webApp
              appName: 'app-$(project)-$(env)'
              package: '$(artifactWebRoot)/publish.zip'
